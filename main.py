import telebot
from config import token
# –ó–∞–¥–∞–Ω–∏–µ 7 - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É defaultdict
from collections import defaultdict
from logic import quiz_questions

user_responses = {} 
# –ó–∞–¥–∞–Ω–∏–µ 8 - —Å–æ–∑–¥–∞–π —Å–ª–æ–≤–∞—Ä—å points –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
points = defaultdict(int)
bot = telebot.TeleBot(token)

def send_question(chat_id):
    if chat_id not in user_responses or user_responses[chat_id] >= len(quiz_questions):
        bot.send_message(chat_id, "Please start the quiz with the command /start.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = quiz_questions[user_responses[chat_id]]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if question.image_url:
        bot.send_photo(chat_id, question.image_url)
    bot.send_message(chat_id, question.text, reply_markup=question.gen_markup())


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∫–≤–∏–∑
    if chat_id not in user_responses:
        bot.answer_callback_query(call.id, "Please start the quiz with the /start command.")
        return
    
    if call.data == "correct":
        bot.answer_callback_query(call.id, "Answer is correct")
        # –ó–∞–¥–∞–Ω–∏–µ 9 - –¥–æ–±–∞–≤—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        points[chat_id] += 1
    elif call.data == "wrong":
        bot.answer_callback_query(call.id,  "Answer is wrong")
      
    # –ó–∞–¥–∞–Ω–∏–µ 5 - —Ä–µ–∞–ª–∏–∑—É–π —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    user_responses[chat_id] += 1
    # –ó–∞–¥–∞–Ω–∏–µ 6 - –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –µ–≥–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if chat_id not in user_responses or user_responses[chat_id]>=len(quiz_questions):
        bot.send_message(chat_id, f"The end. You scored {points[chat_id]} points.")
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        del user_responses[chat_id]
        del points[chat_id]
        bot.send_message(chat_id, "To start again, type /start")
        return
    else:
        send_question(chat_id)

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id

    # –û–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_responses[chat_id] = 0
    points[chat_id] = 0

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! üêæ –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑!")
    send_question(chat_id)

bot.infinity_polling()
